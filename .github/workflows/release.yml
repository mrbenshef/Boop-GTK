name: Release

on:
  push:
    branches: [ release ]
  pull_request:
    branches: [ release ]

env:
  CARGO_TERM_COLOR: always

jobs:
  release-linux-amd64:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    # cache cargo
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - name: GTK development librarys
      run: sudo apt-get install -y libgtk-3-dev libgtksourceview-3.0-dev
    - name: build
      run: cargo build --release --all-features 
    - name: rename output
      run: mv target/release/boop-gtk ./boop-gtk.linux.amd64
    - uses: actions/upload-artifact@v1
      with:
        name: boop-gtk.linux.amd64
        path: ./boop-gtk.linux.amd64

  release-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    # cache cargo
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    # get the last commit of gvsbuild, this will be used as the cache key     
    - name: get last gvsbuild commit
      run: git ls-remote https://github.com/wingtk/gvsbuild.git refs/heads/master > commit.txt
      shell: cmd
    # cache gvsbuild
    - uses: actions/cache@v2
      id: cache
      with:
        path: lib\**
        key: ${{ runner.os }}-gvsbuild-${{ hashFiles('**/commit.txt') }}
    - name: make library directory
      run: mkdir C:\gtk-build\gtk\x64\release\lib
      shell: cmd
      if: steps.cache.outputs.cache-hit == 'true'
    - name: move lib files
      run: xcopy /e /i lib C:\gtk-build\gtk\x64\release\lib
      shell: cmd
      if: steps.cache.outputs.cache-hit == 'true'
    - name: debug tree
      run: tree C:\gtk-build\gtk\x64\release\lib
      shell: cmd
      if: steps.cache.outputs.cache-hit == 'true'
    # if there was a cache miss, clone
    - name: gvsbuild
      run: git clone https://github.com/wingtk/gvsbuild.git C:\gtk-build\github\gvsbuild
      if: steps.cache.outputs.cache-hit != 'true'
    # remove git's bin, there are conflicting cygwin dll's
    - name: remove Git
      run: rmdir "C:\Program Files\Git\usr\bin" /s /q
      shell: cmd
    # fetch gtk dependencies
    - name: GTK development librarys
      run: python .\build.py build -p=x64 --vs-ver=16 --msys-dir=C:\msys64 -k --enable-gi --py-wheel --py-egg gtk3 gdk-pixbuf gtksourceview3
      working-directory: C:\gtk-build\github\gvsbuild
      if: steps.cache.outputs.cache-hit != 'true'
    # build
    - name: build
      run: cargo build --release --all-features
      env:
        RUSTFLAGS: -L C:\gtk-build\gtk\x64\release\lib
    - name: rename output
      run: mv target/release/boop-gtk.exe ./boop-gtk.windows.exe
    - uses: actions/upload-artifact@v1
      with:
        name: boop-gtk.windows.exe
        path: ./boop-gtk.windows.exe
    # copy lib files for cacheing
    - name: make lib folder
      run: mkdir lib
      shell: cmd
    - name: move lib files
      run: xcopy /e /i C:\gtk-build\gtk\x64\release\lib %cd%\lib
      shell: cmd

  release-macosx:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    # cache cargo
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - name: GTK development librarys
      run: brew install gtk+3 gtksourceview3
    - name: build
      run: cargo build --release --all-features 
    - name: rename output
      run: mv target/release/boop-gtk ./boop-gtk.macos
    - uses: actions/upload-artifact@v1
      with:
        name: boop-gtk.macos
        path: ./boop-gtk.macos

  release-snap:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - uses: snapcore/action-build@v1
      id: snapcraft
    - name: rename output
      run: mv ${{ steps.snapcraft.outputs.snap }} ./boop-gtk.snap
    - uses: actions/upload-artifact@v2
      with:
        name: boop-gtk.snap
        path: ./boop-gtk.snap

  release-flatpak:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: Flatpak
      run: sudo add-apt-repository -y ppa:alexlarsson/flatpak && sudo apt-get update -y && sudo apt-get install -y flatpak
    - name: Flatpak builder deps
      run: sudo apt-get update && sudo apt-get install -y elfutils libcap-dev libsoup-gnome2.4-dev libostree-dev libjson-glib-dev libcurl4-gnutls-dev libelf-dev libdwarf-dev xsltproc
    - name: Flatpak remote
      run: sudo flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
    - name: Flatpak SDK's
      run: sudo flatpak install -y flathub org.freedesktop.Platform//19.08 org.freedesktop.Sdk//19.08 org.freedesktop.Sdk.Extension.rust-stable//19.08
    - name: Flatpak builder
      run: wget https://github.com/flatpak/flatpak-builder/releases/download/1.0.10/flatpak-builder-1.0.10.tar.xz && tar -xvf flatpak-builder-1.0.10.tar.xz && cd flatpak-builder-1.0.10 && ./configure --disable-documentation && make && sudo make install
    - name: Python TOML
      run: sudo apt-get install python3-toml 
    - name: Generate sources
      run: bash flatpak/gen-sources.sh
    - name: Flatpak
      run: sudo flatpak-builder --repo=repo build-dir flatpak/uk.co.mrbenshef.Boop-GTK.json
    - name: Flatpak build bundle
      run: flatpak build-bundle ./repo boop-gtk.flatpak uk.co.mrbenshef.Boop-GTK
    - uses: actions/upload-artifact@v2
      with:
        name: boop-gtk.flatpak
        path: ./boop-gtk.flatpak

  release:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' # don't do a release for pull requests into release, just upload artifacts to test
    needs: [release-linux-amd64, release-macosx, release-windows, release-snap, release-flatpak]
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: boop-gtk.linux.amd64
        path: ./
    - uses: actions/download-artifact@v2
      with:
        name: boop-gtk.macos
        path: ./
    - uses: actions/download-artifact@v2
      with:
        name: boop-gtk.snap
        path: ./
    - uses: actions/download-artifact@v2
      with:
        name: boop-gtk.flatpak
        path: ./
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: false
    - name: Debug LS
      run: ls -al
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./boop-gtk.linux.amd64
        asset_name: boop-gtk.linux.amd64
        asset_content_type: application/octet-stream
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./boop-gtk.macos
        asset_name: boop-gtk.macos
        asset_content_type: application/octet-stream
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./boop-gtk.snap
        asset_name: boop-gtk.snap
        asset_content_type: application/octet-stream
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./boop-gtk.flatpak
        asset_name: boop-gtk.flatpak
        asset_content_type: application/octet-stream